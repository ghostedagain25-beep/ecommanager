# EcomManager Deployment Script for Windows PowerShell
# This script helps prepare your application for deployment

Write-Host "üöÄ EcomManager Deployment Preparation" -ForegroundColor Green
Write-Host "======================================" -ForegroundColor Green

# Check if we're in the right directory
if (-not (Test-Path "client\package.json")) {
    Write-Host "‚ùå Error: client/package.json not found. Please run this script from the project root." -ForegroundColor Red
    exit 1
}

Write-Host "üìã Pre-deployment checklist:" -ForegroundColor Yellow
Write-Host ""

# Check for required files
Write-Host "‚úÖ Checking required files..." -ForegroundColor Green
$requiredFiles = @("render.yaml", "Dockerfile", ".dockerignore", "DEPLOYMENT.md")
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file exists" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file missing" -ForegroundColor Red
    }
}

# Check environment files
Write-Host ""
Write-Host "üîß Checking environment configuration..." -ForegroundColor Yellow
if (Test-Path "client\.env.example") {
    Write-Host "   ‚úÖ client\.env.example exists" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå client\.env.example missing" -ForegroundColor Red
}

if (Test-Path "server\.env.example") {
    Write-Host "   ‚úÖ server\.env.example exists" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå server\.env.example missing" -ForegroundColor Red
}

# Check if dependencies are installed
Write-Host ""
Write-Host "üì¶ Checking dependencies..." -ForegroundColor Yellow
if (Test-Path "client\node_modules") {
    Write-Host "   ‚úÖ Frontend dependencies installed" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Frontend dependencies not installed. Run: cd client && npm install" -ForegroundColor Yellow
}

if (Test-Path "server\node_modules") {
    Write-Host "   ‚úÖ Backend dependencies installed" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Backend dependencies not installed. Run: cd server && npm install" -ForegroundColor Yellow
}

# Check build capability
Write-Host ""
Write-Host "üî® Testing build process..." -ForegroundColor Yellow
Write-Host "   Testing frontend build..." -ForegroundColor Cyan

try {
    Push-Location client
    $null = npm run build 2>$null
    Write-Host "   ‚úÖ Frontend builds successfully" -ForegroundColor Green
    Pop-Location
} catch {
    Write-Host "   ‚ùå Frontend build failed" -ForegroundColor Red
    Pop-Location
}

Write-Host "   Testing backend build..." -ForegroundColor Cyan
try {
    Push-Location server
    $null = npm run build 2>$null
    Write-Host "   ‚úÖ Backend builds successfully" -ForegroundColor Green
    Pop-Location
} catch {
    Write-Host "   ‚ùå Backend build failed" -ForegroundColor Red
    Pop-Location
}

# Git status
Write-Host ""
Write-Host "üìù Git status:" -ForegroundColor Yellow
try {
    $gitStatus = git status --porcelain 2>$null
    if ($gitStatus.Count -eq 0) {
        Write-Host "   ‚úÖ All changes committed" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è  $($gitStatus.Count) uncommitted changes" -ForegroundColor Yellow
        Write-Host "   Run: git add . && git commit -m 'Prepare for deployment'" -ForegroundColor Cyan
    }
} catch {
    Write-Host "   ‚ö†Ô∏è  Not a git repository. Initialize with: git init" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üåê Deployment Options:" -ForegroundColor Green
Write-Host "======================" -ForegroundColor Green
Write-Host ""
Write-Host "1. üéØ Render (Recommended - Free Tier)" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Push to GitHub/GitLab"
Write-Host "   ‚Ä¢ Connect repository to Render"
Write-Host "   ‚Ä¢ Auto-deploys with render.yaml"
Write-Host ""
Write-Host "2. üöÇ Railway (`$5/month credit)" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Install: npm install -g @railway/cli"
Write-Host "   ‚Ä¢ Deploy: railway login && railway init && railway up"
Write-Host ""
Write-Host "3. ‚ñ≤ Vercel (Frontend) + Railway (Backend)" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Connect frontend repo to Vercel"
Write-Host "   ‚Ä¢ Deploy backend to Railway"
Write-Host ""
Write-Host "4. üê≥ Docker (Self-hosted)" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Build: docker build -t ecommanager ."
Write-Host "   ‚Ä¢ Run: docker run -p 10000:10000 ecommanager"
Write-Host ""

Write-Host "üìö Next Steps:" -ForegroundColor Green
Write-Host "==============" -ForegroundColor Green
Write-Host "1. Set up MongoDB Atlas (free tier)"
Write-Host "2. Create Shopify Partner account and app"
Write-Host "3. Choose deployment platform and follow DEPLOYMENT.md"
Write-Host "4. Configure environment variables in hosting platform"
Write-Host "5. Update Shopify app URLs with production domains"
Write-Host ""
Write-Host "üìñ For detailed instructions, see: DEPLOYMENT.md" -ForegroundColor Cyan
Write-Host ""
Write-Host "üéâ Your application is ready for deployment!" -ForegroundColor Green
